stages:
  - build
  - test
  - publish
  - deploy
  - clean
cache:
  paths:
    - .m2/repository
variables:
  DOCKER_IMAGE_NAME: "namnguyen2110/test-deploy"
  DOCKER_IMAGE_TAG: "1.0"
  PORT: 8081
build jar:
  image: maven:3-openjdk-11
  stage: build
  script:
    - mvn clean package -DskipTests=true
  cache:
    paths:
      - target/*.jar
  artifacts:
    paths:
      - target/*.jar
run unit test:
  image: maven:3-openjdk-11
  stage: test
  script:
    - mvn test
build docker file:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  script:
    - docker build
      --cache-from ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
      --tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
#deploy to server:
#  image: alpine:latest
#  stage: deploy
#  tags:
#    - deployment
#  before_script:
#    - apk add openssh-client
#    - eval $(ssh-agent -s)
#    - echo "$ID_RSA" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#  script:
#    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
#    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"
#    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $CONTAINER_NAME || true"
#    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p $PORT:$PORT --name $CONTAINER_NAME $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"
#  environment:
#    name: production
#    url: http://35.240.198.195
#  only:
#    - develop